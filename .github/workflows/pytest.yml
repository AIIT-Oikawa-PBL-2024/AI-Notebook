# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: Python application

on:
  push:
    branches: [ "main" ]    
  pull_request:
    branches: [ "main" ]    

permissions:
  contents: write  
  pull-requests: write

jobs:
  ci-backend:    
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      pull-requests: write
      contents: write
      id-token: write

    services:
      db:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
          MYSQL_DATABASE: "test-db"
          TZ: "Asia/Tokyo"
        options: >-
          --health-cmd="mysqladmin ping --silent --host=127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    defaults:
      run:
        working-directory: ./backend

    steps:
    - uses: actions/checkout@v4

    - name: Wait for MySQL to be ready
      run: |
        echo 'Waiting for MySQL to be connectable...'
        for i in {1..30}; do
          if mysqladmin ping --host=127.0.0.1 --silent; then
            echo 'MySQL is up!'
            break
          else
            echo 'MySQL not up yet...'
          fi
          echo 'Waiting for MySQL...'
          sleep 2
        done
        if [ $i -eq 30 ]; then
          echo 'MySQL is not connectable after 30 attempts, exiting...'
          exit 1
        fi

    - name: Check MySQL logs
      run: docker logs $(docker ps -q --filter ancestor=mysql:8.0)

    - name: Grant privileges to user
      run: |
        mysql --protocol=tcp -h 127.0.0.1 -P 3306 -u root -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%'; FLUSH PRIVILEGES;"
      env:
        DB_PASSWORD: ""
        DB_USER: "root"

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install poetry
      uses: abatilo/actions-poetry@v2

    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local

    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./backend/.venv
        key: venv-${{ hashFiles('poetry.lock') }}

    - name: Install the project dependencies
      run: |
        poetry install --no-root
        poetry add pytest pytest-cov
        poetry add ruff
        poetry add mypy
        
    - name: Lint with Ruff
      run: |
        poetry run ruff check --exclude=./app/db ./app --output-format=github
      
    - name: Lint with Mypy
      run: |
        poetry run mypy --exclude 'app/db' ./app --config-file pyproject.toml --ignore-missing-imports --no-namespace-packages
    
    - name: Set Up GOOGLE_APPLICATION_CREDENTIALS_JSON
      env:
        GCLOUD_SERVICE_KEY: ${{ secrets.GCLOUD_SERVICE_KEY }}
        GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
      run: echo $GCLOUD_SERVICE_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS_JSON
   
    - name: Test with pytest
      env:
        BUCKET_NAME: ${{ secrets.BUCKET_NAME }}    
      run: |
        cp ./tests/conftest_ci.py ./tests/conftest.py        
        poetry run pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=app tests/ | tee pytest-coverage.txt
      
    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main     
      with:
          coverage-path-prefix: backend/
          title: Backend Coverage Report
          pytest-coverage-path: backend/pytest-coverage.txt
          junitxml-path: backend/pytest.xml
      
    - name: delete GOOGLE_APPLICATION_CREDENTIALS_JSON
      run: rm $GOOGLE_APPLICATION_CREDENTIALS_JSON
      if: ${{ always() }}

  ci-frontend:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    permissions:
      pull-requests: write
      contents: write
      id-token: write
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - uses: actions/checkout@v4

    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install poetry
      uses: abatilo/actions-poetry@v2

    - name: Setup a local virtual environment (if no poetry.toml file)
      run: |
        poetry config virtualenvs.create true --local
        poetry config virtualenvs.in-project true --local

    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./frontend/.venv
        key: venv-${{ hashFiles('poetry.lock') }}

    - name: Install the project dependencies
      run: |
        poetry install --no-root
        poetry add pytest pytest-cov
        poetry add ruff
        poetry add mypy
      
    - name: Lint with Ruff
      run: |
        poetry run ruff check ./app --output-format=github         
      
    - name: Lint with Mypy
      run: |
        poetry run mypy ./app --config-file pyproject.toml --ignore-missing-imports --no-namespace-packages
      
    - name: Test with pytest
      run: |        
        poetry run pytest --junitxml=pytest.xml --cov-report=term-missing:skip-covered --cov=app tests/ | tee pytest-coverage.txt
      
    - name: Pytest coverage comment
      uses: MishaKav/pytest-coverage-comment@main     
      with:
          coverage-path-prefix: frontend/
          title: Frontend Coverage Report
          pytest-coverage-path: frontend/pytest-coverage.txt
          junitxml-path: frontend/pytest.xml   

  